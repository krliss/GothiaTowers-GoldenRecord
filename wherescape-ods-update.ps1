#--==============================================================================
#-- DBMS Name        :    SNOWFLAKE Custom*
#-- Block Name       :    update_ODS_GOLDENRECORD
#-- Template         :    wsl_snowflake_block_perm
#-- Template Version :    8.0.1.0
#-- Description      :    Update the Data Store table ODS_GOLDENRECORD
#-- Generated by     :    WhereScape RED Version 8.1.1.0 (build 180427-141554)
#-- Generated for    :    Gothia Towers
#-- Generated on     :    Tuesday, January 15, 2019 at 14:02:48
#-- Author           :    klissvall
#--==============================================================================
#-- Notes / History
#--

Import-module -Name WslPowershellCommon -DisableNameChecking
Import-module -Name WslPowershellSnowflake -DisableNameChecking
$tgtConn = New-Object System.Data.Odbc.OdbcConnection
Hide-Window

#--============================================================================
#-- General Variables
#--============================================================================

$sequence = ${env:WSL_SEQUENCE}
$jobName = ${env:WSL_JOB_NAME}
$taskName = ${env:WSL_TASK_NAME}
$jobId = ${env:WSL_JOB_KEY}
$taskId = ${env:WSL_TASK_KEY}
$return_Msg = "ODS_GOLDENRECORD updated."
$status = 1

#--============================================================================
#-- Main
#--============================================================================

$step = 100
$mergeCount = 0
  
if ( $status -eq 1 ){

  #--============================================================================
  #-- Refresh data
  #--============================================================================

  $step = 200

  $sql = @"
  MERGE INTO [TABLEOWNER].[ODS_GOLDENRECORD]
  USING (
    SELECT  LOAD_GoldenRecordIncrement.CustomerSourceID AS CUSTOMERSOURCEID
         , LOAD_GoldenRecordIncrement.Email AS EMAIL
         , LOAD_GoldenRecordIncrement.Mobile AS MOBILE
         , LOAD_GoldenRecordIncrement.FirstName AS FIRSTNAME
         , LOAD_GoldenRecordIncrement.LastName AS LASTNAME
         , LOAD_GoldenRecordIncrement.Date AS DATE_COLUMN
         , CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS dss_create_time
         , CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS dss_update_time
    FROM [TABLEOWNER].[LOAD_GoldenRecordIncrement] LOAD_GoldenRecordIncrement
    ) AS src
  ON  ODS_GOLDENRECORD.CUSTOMERSOURCEID = src.CUSTOMERSOURCEID
  WHEN MATCHED THEN UPDATE
  SET ODS_GOLDENRECORD.dss_update_time = src.dss_update_time
  WHEN NOT MATCHED THEN INSERT
  ( CUSTOMERKEY
  , CUSTOMERSOURCEID
  , EMAIL
  , MOBILE
  , FIRSTNAME
  , LASTNAME
  , DATE_COLUMN
  , dss_create_time
  , dss_update_time
  )
  VALUES
  ( '<empty>'
  , src.CUSTOMERSOURCEID
  , src.EMAIL
  , src.MOBILE
  , src.FIRSTNAME
  , src.LASTNAME
  , src.DATE_COLUMN
  , src.dss_create_time
  , src.dss_update_time
  )
  ;
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed data merge into table ODS_GOLDENRECORD step $step" -odbcConn $tgtConn
  $mergeCount = $mergeCount + $SnowflakeResult[1]
  $return_Msg = $SnowflakeResult[2]
} 

#--=====================================================
#-- All Done report the results
#--=====================================================

$step = 300

#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log
$metaResult = WsWrkTask -Replaced $mergeCount
if ( $metaResult -lt -1 ){
  $status = -2
  $return_Msg = "Failure executing WsWrkTask. $mergeCount records merged."
}

#-- Work out return message
if ( $status -eq 1 ) {

  $return_Msg = "ODS_GOLDENRECORD updated.  "
  $return_Msg += "$mergeCount records merged.  "
}

$status
$return_Msg

$tgtConn.Dispose()

#--=====================================================
#-- Update the empty customer keys
#--=====================================================

Function Set-CustomerKey
{
    Param (
        [Parameter(mandatory=$true)]
        [string]$file)

    $csv = Import-Csv C:\temp\goldenrecord\$file.csv -Header T2_CustomerKey,T2_Email,T1_Email,T2_Mobile,T1_Mobile,T2_FirstName,T1_FirstName,T2_LastName,T1_LastName,T2_CustomerSourceId,T1_CustomerSourceId 
    $out = @()

    foreach($a in $csv) {
		$out += "UPDATE edw.ODS_GOLDENRECORD t1 SET CUSTOMERKEY = '"+ $a.T2_CustomerKey + "' where t1.customerkey = '<empty>' and t1.customersourceid = '" + $a.T1_CustomerSourceId + "';"
    }
    #set remaining empty customerkeys with uuid_string() 
    $out += "UPDATE edw.ODS_GOLDENRECORD t1 SET CUSTOMERKEY = uuid_string() where t1.customerkey = '<empty>';" 
 
    $out | out-file -filepath c:\temp\goldenrecord\update$file.sql -Encoding UTF8
}
$arguments = '-q "copy into @smprod_db.stage.goldenrecord_stage/data.csv from (select * from stage.VIEW_GOLDENRECORD) file_format = (compression=''NONE'') overwrite=true single=true;"'
$process = start-process -FilePath "snowsql" -argumentlist $arguments -PassThru 
$process.WaitForExit();
$arguments = '-q "get @smprod_db.stage.goldenrecord_stage file://c:/temp/goldenrecord PATTERN = ''.*data.*[.]csv'';"'
$process = start-process -FilePath "snowsql" -argumentlist $arguments -PassThru 
$process.WaitForExit();
Set-CustomerKey data
$arguments = '-f c:/temp/goldenrecord/updatedata.sql'
start-process -FilePath "snowsql" -argumentlist $arguments
