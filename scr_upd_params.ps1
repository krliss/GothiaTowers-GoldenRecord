#--==============================================================================
 #-- DBMS Name        :    SNOWFLAKE Custom*
 #-- Block Name       :    scr_upd_params
 #-- Template Version :    8.0.1.0
 #-- Description      :    Custom script to update delta parameter values
 #-- Generated by     :    WhereScape RED Version 8.0.1.0 (build 171017-084020)
 #-- Generated for    :    SNOWFLAKE
 #-- Generated on     :    Wednesday, November 29, 2017
 #-- Author           :    Mark van der Heijden
 #--==============================================================================
 #-- Notes / History
 #--
 #------------------------------------------------------------------------------
 # Work out output files and validate parameter values
 #------------------------------------------------------------------------------
 Import-module -Name WslPowershellCommon -DisableNameChecking
 $FILELOG = "c:\temp\wsl$env:WSL_SEQUENCE.log"
 $FILEAUD = "c:\temp\wsl$env:WSL_SEQUENCE.aud"
   if (Test-Path env:WSL_LOAD_TABLE)  {$LOAD_TABLE  = $env:WSL_LOAD_TABLE}  else {$LOAD_TABLE  = "load_table"}
 if (Test-Path env:WSL_SERVER)      {$SERVER      = $env:WSL_SERVER}      else {$SERVER      = "localhost"}
 if (Test-Path env:WSL_DATABASE)    {$DATABASE    = $env:WSL_DATABASE}    else {$DATABASE    = "WhereScape_Snowflake_Repo_Dev"}
 if (Test-Path env:WSL_USER)        {$USER        = $env:WSL_USER}        else {$USER        = "Knowit_Admin"}
 if (Test-Path env:WSL_USER)        {$PWD         = $env:WSL_PWD}         else {$PWD         = ""}
 if (Test-Path env:WSL_META_DSN)    {$DSN         = $env:WSL_DSN}         else {$DSN         = "Wherescapemeta2"}
 #------------------------------------------------------------------------------
 # Initialise variables
 #------------------------------------------------------------------------------
 $ParCnt        = 0
 $AZDWConStr    = "DSN=Snowflake; UID=$USER; PWD=$PWD;"
 $Schema        = "EDW"
 $Database      = "SMPROD_DB"
 #------------------------------------------------------------------------------
 # Open a connection to the Repository database
 #------------------------------------------------------------------------------
 # $RepoConStr    = "DSN=${env:WSL_META_DSN}; Integrated Security=true;"
 $RepoConStr    = "DSN=$DSN; Uid=$USER; Pwd=$PWD;"
 $RepoCon       = New-Object System.Data.Odbc.OdbcConnection($RepoConStr)
 $RepoCon.open()
 #------------------------------------------------------------------------------
 # Set the SQL templates for the maximum value and updating the parameter value
 #------------------------------------------------------------------------------
 $ConSQL        = @'
 SET NOCOUNT ON;
 SELECT   'DSN='
 +        dc_odbc_source
 +        CASE
             WHEN ISNULL(dc_extract_userid, '') = ''
             THEN '; Integrated Security=true;' 
             ELSE '; UID='          +
                  dc_extract_userid +
                  '; PWD='          +
                  dc_extract_pwd    +
                  ';'
          END            AS ConnectString
          , dt_database AS DbName
          , dt_schema AS SchName
 FROM     ws_obj_object
 JOIN     ws_dbc_target
 ON       oo_target_key  =  dt_target_key
 JOIN     ws_dbc_connect
 ON       dt_connect_key =  dc_obj_key 
 WHERE    oo_name        =  '<tabname>'
'@
 $MaxSQL        = @'
 SELECT COUNT(*)       RowCnt
 ,      CAST(MAX(<colname>) AS VARCHAR) MaxVal
 FROM   <dbname>.<schname>.<tabname>
'@
 $MaxSQL1        = @'
 SELECT CAST(MAX(WARENKORBBELEGID) AS VARCHAR) MaxVal
 FROM   SMPROD_DB.EDW.ODS_ESUCCESS_WARENKORBBELEG
'@
 $MaxSQL2        = @'
 SELECT CAST(MAX(WARENKORBPOSID) AS VARCHAR) MaxVal
 FROM   SMPROD_DB.EDW.ODS_ESUCCESS_WARENKORBPOS
'@
 $MaxSQL3        = @'
 SELECT CAST(MAX(EREIGNISID) AS VARCHAR) MaxVal
 FROM   SMPROD_DB.EDW.ODS_ESUCCESS_EREIGNIS
'@
 $MaxSQL4        = @'
 SELECT CAST(MAX(BELEGID) AS VARCHAR) MaxVal
 FROM   SMPROD_DB.EDW.ODS_ESUCCESS_BELEG
'@
 $MaxSQL5        = @'
 SELECT CAST(MAX(LGNTINITANSCHRIFTTYPID) AS VARCHAR) MaxVal
 FROM   SMPROD_DB.EDW.ODS_ESUCCESS_LGNTINITANSCHRIFTTYP
'@
 $MaxSQL6        = @'
 SELECT CAST(MAX(LGNTINITBELEGSTATUSID) AS VARCHAR) MaxVal
 FROM   SMPROD_DB.EDW.ODS_ESUCCESS_LGNTINITBELEGSTATUS
'@
 $MaxSQL7        = @'
 SELECT CAST(MAX(KASSENBELEGID) AS VARCHAR) MaxVal
 FROM   SMPROD_DB.EDW.ODS_ESUCCESS_KASSENBELEG
'@
 $UpdSQL        = @'
 SET NOCOUNT ON;
 UPDATE dbo.dss_parameter
 SET dss_parameter_name = 'DV_<tabname>'
 ,      dss_parameter_value = '<max_val>'
 WHERE  dss_parameter_name  LIKE 'DV_<tabname>'
'@
 #------------------------------------------------------------------------------
 # Get a list of the delta parameters
 #------------------------------------------------------------------------------
 # Build and run the SQL command to get the delta column parameter values
 # Parameter name = DC_<table_name>
 $LogMsg = 'Getting the delta column details from the repository'
 Add-Content $FILELOG $LogMsg
 $sql           = @'
 SET NOCOUNT ON;
 SELECT dss_parameter_name
 ,      dss_parameter_value
 FROM   dbo.dss_parameter
 WHERE  dss_parameter_name  LIKE 'DC_%'
'@
 $RepoCmd       = New-Object system.Data.Odbc.OdbcCommand($sql,$RepoCon)
 $RepoDA        = New-Object system.Data.Odbc.OdbcDataAdapter($RepoCmd)
 $RepoDT        = New-Object system.Data.datatable
 $null          = $RepoDA.fill($RepoDT)
 #------------------------------------------------------------------------------
 # Repeat over the returned list of parameter values
 #------------------------------------------------------------------------------
 if($RepoDT.Rows -eq 0) {
       $LogMsg        = 'No rows were found in $RepoDT'
    Add-Content $FILELOG $LogMsg
 }
 foreach($row in $RepoDT)
 {
    # Extract the values
    $TabNam        = $row.dss_parameter_name.Substring(3)
    $ColNam        = $row.dss_parameter_value
    # Get the connection string for the current table
    $StrSQL        = $ConSQL.Replace('<tabname>', $TabNam)
    $ConnCmd       = New-Object system.Data.Odbc.OdbcCommand($StrSQL,$RepoCon)
    $ConnDA        = New-Object system.Data.Odbc.OdbcDataAdapter($ConnCmd)
    $ConnDT        = New-Object system.Data.datatable
    $null          = $ConnDA.fill($ConnDT)
    # Connect to the table's database
    #$AZDWConStr    = $ConnDT.ConnectString
    $AZDWCon       = New-Object System.Data.Odbc.OdbcConnection($AZDWConStr)
    $AZDWCon.open()
    # Generate the SQL statement to get the MAX value
    $TabSQL        = $MaxSQL.Replace('<schname>', $Schema)
    $TabSQL        = $TabSQL.Replace('<dbname>',  $Database)
    $TabSQL        = $TabSQL.Replace('<tabname>', $TabNam)
    $TabSQL        = $TabSQL.Replace('<colname>', $ColNam)
    # Execute the SQL command against the table's connection
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($TabSQL,$AZDWCon)
    $AZDWDA        = New-Object system.Data.Odbc.OdbcDataAdapter($AZDWCmd)
    $AZDWDT        = New-Object system.Data.datatable
    $null          = $AZDWDA.fill($AZDWDT)
    
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($MaxSQL1,$AZDWCon)
    $maxvalue1     = $AZDWCmd.ExecuteScalar() 
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($MaxSQL2,$AZDWCon)
    $maxvalue2     = $AZDWCmd.ExecuteScalar() 
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($MaxSQL3,$AZDWCon)
    $maxvalue3     = $AZDWCmd.ExecuteScalar() 
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($MaxSQL4,$AZDWCon)
    $maxvalue4     = $AZDWCmd.ExecuteScalar() 
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($MaxSQL5,$AZDWCon)
    $maxvalue5     = $AZDWCmd.ExecuteScalar() 
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($MaxSQL6,$AZDWCon)
    $maxvalue6     = $AZDWCmd.ExecuteScalar() 
    $AZDWCmd       = New-Object system.Data.Odbc.OdbcCommand($MaxSQL7,$AZDWCon)
    $maxvalue7     = $AZDWCmd.ExecuteScalar() 
    $AZDWCon.close()

    # Was the source table empty?
    if ($AZDWDT.RowCnt -eq 0)
    {
       $LogMsg        = '- ' + $TabNam + ' empty - parameter value left unchanged'
    }
    else
    {
       # Increment the updated parameter count
       $ParCnt++
       # Generate the SQL statement to update the parameter value

       $ParSQL        = $UpdSQL.Replace('<tabname>', $TabNam)

       if ($TabNam -eq "ODS_ESUCCESS_WARENKORBBELEG") 
       {
              $ParSQL        = $ParSQL.Replace('<max_val>', $maxvalue1)
       } 
       elseif ($TabNam -eq "ODS_ESUCCESS_WARENKORBPOS") 
       {
            $ParSQL        = $ParSQL.Replace('<max_val>', $maxvalue2)
       } 
       elseif ($TabNam -eq "ODS_ESUCCESS_EREIGNIS") 
       {
            $ParSQL        = $ParSQL.Replace('<max_val>', $maxvalue3)
       } 
       elseif ($TabNam -eq "ODS_ESUCCESS_BELEG") 
       {
            $ParSQL        = $ParSQL.Replace('<max_val>', $maxvalue4)
       }  
       elseif ($TabNam -eq "ODS_ESUCCESS_LGNTINITANSCHRIFTTYP") 
       {
            $ParSQL        = $ParSQL.Replace('<max_val>', $maxvalue5)
       }
       elseif ($TabNam -eq "ODS_ESUCCESS_LGNTINITBELEGSTATUS") 
       {
            $ParSQL        = $ParSQL.Replace('<max_val>', $maxvalue6)
       }
       elseif ($TabNam -eq "ODS_ESUCCESS_KASSENBELEG") 
       {
            $ParSQL        = $ParSQL.Replace('<max_val>', $maxvalue7)
       }
       else 
       {
            $ParSQL        = $ParSQL.Replace('<max_val>', $AZDWDT.MaxVal)
       }

       #Write new parameters to SQL database
       $ParmCmd       = New-Object system.Data.Odbc.OdbcCommand($ParSQL,$RepoCon)
       $ParmDA        = New-Object system.Data.Odbc.OdbcDataAdapter($ParmCmd)
       $ParmDT        = New-Object system.Data.datatable
       $null          = $ParmDA.fill($ParmDT)
       $LogMsg        = '- Delta value DV_' + $TabNam + ' set to ' + $AZDWDT.MaxVal
       
    }
    # Write a message to the log
    Add-Content $FILELOG $LogMsg
 }
 #------------------------------------------------------------------------------
 # Close the database connections
 #------------------------------------------------------------------------------
 Add-Content $FILELOG 'Closing database connections'
 $RepoCon.close()
 #------------------------------------------------------------------------------
 # FINISH
 #------------------------------------------------------------------------------
 $LogMsg  = $ParCnt.ToString() + ' delta parameter values successfully updated'
 Write-Output 1
 Write-Output $LogMsg
 Get-Content  $FILELOG
 exit

 
